package view.panels;

import Model.ModelCellClientes;
import Model.conexion.CrudMysql;
import controller.JsonClienteCRUD;
import controller.JsonUserValidation;
import controller.ValidateRegular;
import controller.viewExcel.Modelo_Excel;
import java.awt.BorderLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import table.TableClient.TableActionEventCliente;
import view.panels.forms.FormClientes;
import view.panels.forms.Maximize;

public class PanelCliente extends javax.swing.JPanel {

    private List<ModelCellClientes> listClient = new ArrayList<ModelCellClientes>();
    private ArrayList<String> busquedaLista = new ArrayList<>();
    private String searchSelect = "";
    private String banderaSearch = "nombres";

    JFileChooser archivo_selec = new JFileChooser();
    File archivo;
    Modelo_Excel model_ex = new Modelo_Excel();

    public PanelCliente() {
        initComponents();
        TableClientes.fixTable(jScrollPane1);
        TableClientes.setIconsColumns(8, 6, 7);
        listarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        ContentPanel = new javax.swing.JPanel();
        ContentButtonsSearch = new javax.swing.JPanel();
        TitleProveedores = new javax.swing.JLabel();
        btn_ExportarExcel = new javax.swing.JLabel();
        btn_AgregarProveedores = new javax.swing.JLabel();
        ContextSearch = new javax.swing.JPanel();
        TextSearch = new javax.swing.JPanel();
        txtSearchCliente = new javax.swing.JTextField();
        IconSearch = new javax.swing.JLabel();
        typeName = new javax.swing.JLabel();
        typeTelefono = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        typeApellido = new javax.swing.JLabel();
        typeNumDOC = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        ContentTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableClientes = new table.TableClient.TableClientes();

        ContentButtonsSearch.setBackground(new java.awt.Color(250, 250, 250));

        TitleProveedores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/TitleClientes.png"))); // NOI18N

        btn_ExportarExcel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_ExportarExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btn_ExportarExcel.png"))); // NOI18N
        btn_ExportarExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ExportarExcelMouseClicked(evt);
            }
        });

        btn_AgregarProveedores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btn_newCLIENTE.png"))); // NOI18N
        btn_AgregarProveedores.setToolTipText("");
        btn_AgregarProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_AgregarProveedoresMouseClicked(evt);
            }
        });

        ContextSearch.setBackground(new java.awt.Color(250, 250, 250));

        TextSearch.setBackground(new java.awt.Color(255, 255, 255));
        TextSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtSearchCliente.setBackground(new java.awt.Color(255, 255, 255));
        txtSearchCliente.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 17)); // NOI18N
        txtSearchCliente.setForeground(new java.awt.Color(16, 21, 64));
        txtSearchCliente.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtSearchCliente.setText(" ");
        txtSearchCliente.setBorder(null);
        txtSearchCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchClienteKeyReleased(evt);
            }
        });

        IconSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IconSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Search.png"))); // NOI18N

        javax.swing.GroupLayout TextSearchLayout = new javax.swing.GroupLayout(TextSearch);
        TextSearch.setLayout(TextSearchLayout);
        TextSearchLayout.setHorizontalGroup(
            TextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TextSearchLayout.createSequentialGroup()
                .addComponent(IconSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtSearchCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
        );
        TextSearchLayout.setVerticalGroup(
            TextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextSearchLayout.createSequentialGroup()
                .addGroup(TextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(IconSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(txtSearchCliente))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        typeName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/types/typeNombre.png"))); // NOI18N
        typeName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeNameMouseClicked(evt);
            }
        });

        typeTelefono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/types/typeTelefono.png"))); // NOI18N
        typeTelefono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeTelefonoMouseClicked(evt);
            }
        });

        jComboBox2.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 17)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(16, 21, 64));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "RUC" }));
        jComboBox2.setBorder(null);
        jComboBox2.setFocusable(false);

        typeApellido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/types/typeApellido.png"))); // NOI18N
        typeApellido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeApellidoMouseClicked(evt);
            }
        });

        typeNumDOC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/types/typeNumDoc.png"))); // NOI18N
        typeNumDOC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeNumDOCMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ContextSearchLayout = new javax.swing.GroupLayout(ContextSearch);
        ContextSearch.setLayout(ContextSearchLayout);
        ContextSearchLayout.setHorizontalGroup(
            ContextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContextSearchLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(TextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeApellido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeTelefono)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeNumDOC)
                .addContainerGap(169, Short.MAX_VALUE))
        );
        ContextSearchLayout.setVerticalGroup(
            ContextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContextSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ContextSearchLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(ContextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(typeApellido)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeTelefono)
                    .addComponent(typeName)
                    .addComponent(typeNumDOC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setBackground(new java.awt.Color(250, 250, 250));
        jSeparator1.setForeground(new java.awt.Color(224, 225, 234));

        jSeparator4.setBackground(new java.awt.Color(250, 250, 250));
        jSeparator4.setForeground(new java.awt.Color(224, 225, 234));

        javax.swing.GroupLayout ContentButtonsSearchLayout = new javax.swing.GroupLayout(ContentButtonsSearch);
        ContentButtonsSearch.setLayout(ContentButtonsSearchLayout);
        ContentButtonsSearchLayout.setHorizontalGroup(
            ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ContextSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                        .addComponent(TitleProveedores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_ExportarExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_AgregarProveedores)
                        .addGap(44, 44, 44))
                    .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                        .addGroup(ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                                .addComponent(jSeparator1)
                                .addGap(3, 3, 3))
                            .addComponent(jSeparator4))
                        .addGap(34, 34, 34))))
        );
        ContentButtonsSearchLayout.setVerticalGroup(
            ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                .addGroup(ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentButtonsSearchLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(TitleProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(ContentButtonsSearchLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ContentButtonsSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_ExportarExcel)
                            .addComponent(btn_AgregarProveedores))
                        .addGap(10, 10, 10)))
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContextSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ContentTable.setBackground(new java.awt.Color(255, 255, 255));

        TableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableClientes);

        javax.swing.GroupLayout ContentTableLayout = new javax.swing.GroupLayout(ContentTable);
        ContentTable.setLayout(ContentTableLayout);
        ContentTableLayout.setHorizontalGroup(
            ContentTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentTableLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1)
                .addGap(39, 39, 39))
        );
        ContentTableLayout.setVerticalGroup(
            ContentTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentTableLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout ContentPanelLayout = new javax.swing.GroupLayout(ContentPanel);
        ContentPanel.setLayout(ContentPanelLayout);
        ContentPanelLayout.setHorizontalGroup(
            ContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ContentButtonsSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ContentTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ContentPanelLayout.setVerticalGroup(
            ContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentPanelLayout.createSequentialGroup()
                .addComponent(ContentButtonsSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ContentTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AgregarProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_AgregarProveedoresMouseClicked
        //JsonClienteCRUD.addCliente(ModelCellClientes);
        addContainer(new FormClientes(), getWidth(), getHeight(), ContentPanel);
    }//GEN-LAST:event_btn_AgregarProveedoresMouseClicked

    private void txtSearchClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchClienteKeyReleased
        System.out.println("Campturando el texto: " + txtSearchCliente.getText());
        if (txtSearchCliente.getText().trim().isEmpty()) {
            listarClientes();
        } else {
            switch (banderaSearch) {
                case "nombres":
                    listarNombres();
                    break;
                case "apellidos":
                    listarApellidos();
                    break;
                case "telefono":
                    listarTelefono();
                    break;
                case "numero":
                    listarNumero();
                    break;
                default:
                    System.out.println("Error");
            }
        }
    }//GEN-LAST:event_txtSearchClienteKeyReleased

    private void typeNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeNameMouseClicked
        banderaSearch = "nombres";
        listarNombres();
    }//GEN-LAST:event_typeNameMouseClicked

    private void typeApellidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeApellidoMouseClicked
        banderaSearch = "apellidos";
        listarApellidos();
    }//GEN-LAST:event_typeApellidoMouseClicked

    private void typeTelefonoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeTelefonoMouseClicked
        banderaSearch = "telefono";
        listarTelefono();
    }//GEN-LAST:event_typeTelefonoMouseClicked

    private void typeNumDOCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeNumDOCMouseClicked
        banderaSearch = "numero";
        listarNumero();
    }//GEN-LAST:event_typeNumDOCMouseClicked

    private void btn_ExportarExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ExportarExcelMouseClicked
        if (archivo_selec.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
            archivo = archivo_selec.getSelectedFile();
            
            String nombreArchivo = archivo.getName();
            if (!nombreArchivo.toLowerCase().endsWith(".xls") && !nombreArchivo.toLowerCase().endsWith(".xlsx")) {
                // Agregar extensión .xlsx si no está presente en el nombre del archivo
                nombreArchivo += ".xlsx";
                archivo = new File(archivo.getParentFile(), nombreArchivo);
            }

            // Continuar con el código para guardar el archivo
            if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                model_ex.exportacion(archivo, TableClientes, 6);
                /*MENSAJE DE EXITO*/
                ImageIcon icononew = new ImageIcon(JsonUserValidation.class.getResource("/img/message/comprobado.png"));
                JOptionPane.showMessageDialog(null, "Archivo Creado", "", 0, icononew);
            } else {
                JOptionPane.showMessageDialog(null, "Elija un formato válido");
            }
        }
    }//GEN-LAST:event_btn_ExportarExcelMouseClicked

    /*EVENTO DE BOTONES*/
    TableActionEventCliente event = new TableActionEventCliente() {
        @Override
        public void onEdit(ModelCellClientes clientes) {
            Maximize.updateCrud = true;
            ModelCellClientes updateClient = listClient.get(TableClientes.getSelectedRow());
            ValidateRegular.updateCliente = updateClient;
            FormClientes fCl = new FormClientes();
            addContainer(fCl, getWidth(), getHeight(), ContentPanel);
        }

        @Override
        public void onDelete(ModelCellClientes clientes) {
            ModelCellClientes deleteCliente = listClient.get(TableClientes.getSelectedRow());
            String[] opciones = {"Si", "No"};
            ImageIcon icono = new ImageIcon("src/img/message/advertencia.png"); // Ruta al archivo de imagen del ícono
            int opcion = JOptionPane.showOptionDialog(null, "¿Desea eliminar al cliente " + deleteCliente.getNombre() + " ?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, icono, opciones, opciones[0]);
            if (opcion == JOptionPane.YES_OPTION) {
                System.out.println("Seleccione el yes option");
                new JsonClienteCRUD().deleteCliente(deleteCliente.getIdCliente());
                if (ValidateRegular.conexion) {
                    try {
                        CrudMysql.crudMysqlClientes();
                    } catch (Exception e) {
                        System.out.println("Sin conexion a internet clientes no eliminado en base de datos");
                    }
                }
            }
            listarClientes();
        }
    };

    /*INIT DATA*/
    private void listarClientes() {
        if (ValidateRegular.ModifClientes != null) {
            listClient = ValidateRegular.ModifClientes;
        } else {
            listClient = new JsonClienteCRUD().returnClientes();
        }
        DefaultTableModel modelo = new DefaultTableModel();
        String columns[] = {"Nombres", "Apellidos", "Tipo", "Documento", "Telefono", "Correo", "Editar", "Eliminar"};
        TableClientes.setModel(modelo);
        modelo.setColumnIdentifiers(columns);
        if (listClient != null) {
            for (ModelCellClientes cl : listClient) {
                System.out.println("ESTOY LISTADO A CLIENTE: " + cl.getApellido());
                TableClientes.addRow(new ModelCellClientes(cl.getNombre(), cl.getApellido(), cl.getTipoDocumento(), cl.getNumDocumento(), cl.getTelefono(),
                        cl.getCorreo()).toRowTable(event));
            }
        }
    }

    private void listarClientesType(List<ModelCellClientes> typeCliente) {
        DefaultTableModel modelo = new DefaultTableModel();
        String columns[] = {"Nombres", "Apellidos", "Tipo", "Documento", "Telefono", "Correo", "Editar", "Eliminar"};
        TableClientes.setModel(modelo);
        modelo.setColumnIdentifiers(columns);
        for (int i = 0; i < typeCliente.size(); i++) {
            TableClientes.addRow(new ModelCellClientes(typeCliente.get(i).getNombre(), typeCliente.get(i).getApellido(), typeCliente.get(i).getTipoDocumento(), typeCliente.get(i).getNumDocumento(), typeCliente.get(i).getTelefono(),
                    typeCliente.get(i).getCorreo().toString()).toRowTable(event));
        }
    }

    private void listarNombres() {
        List<ModelCellClientes> newCellCliente = new JsonClienteCRUD().searchListClienteNombre(txtSearchCliente.getText());
        listarClientesType(newCellCliente);
    }

    private void listarApellidos() {
        List<ModelCellClientes> newCellCliente = new JsonClienteCRUD().searchListClienteApellido(txtSearchCliente.getText());
        listarClientesType(newCellCliente);
    }

    private void listarTelefono() {
        List<ModelCellClientes> newCellCliente = new JsonClienteCRUD().searchListClienteTelefono(txtSearchCliente.getText());
        listarClientesType(newCellCliente);
    }

    private void listarNumero() {
        List<ModelCellClientes> newCellCliente = new JsonClienteCRUD().searchListClienteNumero(txtSearchCliente.getText());
        listarClientesType(newCellCliente);
    }

    /**
     *
     * @param p Panel de Ingreso
     * @param width Ancho
     * @param height Alto
     * @param c contenedor
     */
    public void addContainer(JPanel p, int width, int height, JPanel c) {
        p.setSize(width, height);
        p.setLocation(0, 0);
        c.removeAll();
        c.add(p, BorderLayout.CENTER);
        c.revalidate();
        c.repaint();
    }

    public void llenadoBusqueda() {
        busquedaLista.add("nombre");
        busquedaLista.add("apellido");
        busquedaLista.add("telefono");
        busquedaLista.add("numDocumento");
        busquedaLista.add("tipoDocumento");
        busquedaLista.add("ultimo");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ContentButtonsSearch;
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JPanel ContentTable;
    private javax.swing.JPanel ContextSearch;
    private javax.swing.JLabel IconSearch;
    private table.TableClient.TableClientes TableClientes;
    private javax.swing.JPanel TextSearch;
    private javax.swing.JLabel TitleProveedores;
    private javax.swing.JLabel btn_AgregarProveedores;
    private javax.swing.JLabel btn_ExportarExcel;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField txtSearchCliente;
    private javax.swing.JLabel typeApellido;
    private javax.swing.JLabel typeName;
    private javax.swing.JLabel typeNumDOC;
    private javax.swing.JLabel typeTelefono;
    // End of variables declaration//GEN-END:variables

}
